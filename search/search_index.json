{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"django-tailwind-cli","text":"<p>This library provides an integration of Tailwind CSS for Django that is using on the precompiled versions of the Tailwind CSS CLI.</p> <p>The goal of this library is to provided the simplest possible Tailwind integration for your Django project. It took its inspiration from the Tailwind integration for Phoenix which completely skips the neccesity of a node installation.</p>"},{"location":"#installation","title":"Installation","text":"<ol> <li>Install the library.</li> </ol> <pre><code>python -m pip install django-tailwind-cli\n</code></pre> <ol> <li>Add <code>django_tailwind_cli</code> to <code>INSTALLED_APPS</code> in <code>settings.py</code>.</li> </ol> <pre><code>INSTALLED_APPS = [\n    # other Django apps\n    \"django_tailwind_cli\",\n]\n</code></pre> <ol> <li>Configure the <code>STATICFILES_DIRS</code> parameter in your <code>settings.py</code> if not already configured.</li> </ol> <pre><code>STATICFILES_DIRS = [BASE_DIR / \"assets\"]\n</code></pre> <ol> <li>Add template code.</li> </ol> <pre><code>{% load tailwind_cli %}\n...\n&lt;head&gt;\n  ...\n  {% tailwind_css %}\n  ...\n&lt;/head&gt;\n</code></pre> <ol> <li>Start the debug server.</li> </ol> <pre><code>python manage.py tailwind runserver\n</code></pre> <p>Enjoy!</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Simplest possible integration.</li> <li>Management commands:</li> <li>To start the Tailwind CLI in watch mode during development.</li> <li>To build the production grade CSS file for your project.</li> <li>To start a debug server along with the Tailwind CLI in watch mode in a single session.</li> <li>Necessary configuration to adapt the library to your project, when the defaults don't fit you.</li> <li>A template tag to include the Tailwind CSS file in your project.</li> <li>A base template for your project.</li> <li>A sane tailwind.config.js that activates all the official plugins and includes a simple HTMX plugin.</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<p>Python 3.8 or newer with Django &gt;= 3.2.</p>"},{"location":"#documentation","title":"Documentation","text":"<p>The documentation can be found at https://django-tailwind-cli.andrich.me/</p>"},{"location":"#contributing","title":"Contributing","text":"<p>If you want to contribute to this project, checkout the development guide for details to get your dev environment up and running.</p>"},{"location":"#license","title":"License","text":"<p>This software is licensed under MIT license.</p>"},{"location":"base_template/","title":"Base Template","text":"<p>The package also includes a minimal base template, which you can use as a starting point for your own project. It is a very simple template, which only includes the CSS stylesheets and the <code>tailwind_css</code> template tag. You can use by putting <code>{% extends \"tailwind_cli/base.html\" %}</code> into your template files.</p> tailwind_cli/base.html<pre><code>{% load tailwind_cli %}\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"{{ LANGUAGE_CODE }}\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;{% block title %}Home{% endblock title %}&lt;/title&gt;\n    {% tailwind_css %}\n    {% block extra_head %}{% endblock extra_head %}\n  &lt;/head&gt;\n  &lt;body&gt;\n    {% block content %}\n    {% endblock content %}\n    {% block extra_body %}{% endblock extra_body %}\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#230","title":"2.3.0","text":"<ul> <li>Changed default config to support lsp-tailwindcss</li> </ul> <p>\"python3 -m django\" was replaced with \"python manage.py\" so that the dynamic   configuration of the content selector in tailwind.config.js also works inside   the language server for Tailwind CSS in VSCode, Sublime, etc.</p>"},{"location":"changelog/#223","title":"2.2.3","text":"<ul> <li>Fixed a copy&amp;paste error introduced by pasting the tailwind.config.js without proper escaping.</li> </ul>"},{"location":"changelog/#222","title":"2.2.2","text":"<ul> <li>Fixed an error locating templates from the global template directories configured via <code>settings.TEMPLATES[0][\"DIRS\"]</code>.</li> </ul>"},{"location":"changelog/#221","title":"2.2.1","text":"<ul> <li>Fixed a bug introduced by refactoring the changes from #49.</li> </ul>"},{"location":"changelog/#220","title":"2.2.0","text":"<ul> <li>#49 by @andrlik added a new management command <code>tailwind list_templates</code>.</li> <li>The new default config uses this command to implent the idea of Calton Gibson outlined in his blog post Using Django\u2019s template loaders to configure Tailwind.</li> </ul>"},{"location":"changelog/#211","title":"2.1.1","text":"<ul> <li>Switched from poetry to hatch for package management.</li> </ul>"},{"location":"changelog/#206","title":"2.0.6","text":"<ul> <li>Bugfix for default tailwind.config.js.</li> </ul>"},{"location":"changelog/#205","title":"2.0.5","text":"<ul> <li>Fixed a regression with the default path for the Tailwind CLI.</li> </ul>"},{"location":"changelog/#204","title":"2.0.4","text":"<ul> <li>The reworked testing setup broke the package. Had to pull 2.0.3 from PyPI.</li> </ul>"},{"location":"changelog/#203","title":"2.0.3","text":"<ul> <li>Readded support for Python 3.8.</li> <li>Added Python 3.12 to the testing matrix.</li> </ul>"},{"location":"changelog/#202","title":"2.0.2","text":"<ul> <li>Bugfixes for typing errors.</li> <li>Added missing test code.</li> </ul>"},{"location":"changelog/#200","title":"2.0.0","text":"<ul> <li>Version 2.0.0 is major refactoring compared to version 1.4.3.</li> <li>No more theme app required.</li> <li>Easier to install.</li> <li>Better out of the box DX.</li> <li>A custom runserver that starts the Tailwind CLI watcher and the debug server in a single terminal session.</li> <li>Less dependencies.</li> </ul>"},{"location":"changelog/#143","title":"1.4.3","text":"<ul> <li>Fixed broken links in the documentation and README.</li> </ul>"},{"location":"changelog/#140","title":"1.4.0","text":"<ul> <li>Refactored the project for future extensions.</li> <li>Added proper documetation which is hosted at https://oliverandrich.github.io/django-tailwind-cli/.</li> <li>Swichted from django-click to django-rich to implement the management commands.</li> </ul>"},{"location":"changelog/#131","title":"1.3.1","text":"<ul> <li>Switched back to poetry after a long discussion.</li> </ul>"},{"location":"changelog/#130","title":"1.3.0","text":"<ul> <li>Switched from poetry to pdm.</li> </ul>"},{"location":"changelog/#122","title":"1.2.2","text":"<ul> <li>Fixed docstrings.</li> <li>Extended ruff configuration.</li> </ul>"},{"location":"changelog/#121","title":"1.2.1","text":"<ul> <li>Bumped default tailwind version to 3.2.7.</li> </ul>"},{"location":"changelog/#120","title":"1.2.0","text":"<ul> <li>Added support for Django 4.2.</li> </ul>"},{"location":"changelog/#110","title":"1.1.0","text":"<ul> <li>Fixes for documentation.</li> <li>Bumped Tailwind CSS default version to 3.2.4.</li> <li>Updated dependencies.</li> </ul>"},{"location":"changelog/#100","title":"1.0.0","text":"<ul> <li>Introduced django-click to the project.</li> <li>Refactored the management commands to use django-click.</li> <li>Renamed the <code>startwatcher</code> command to <code>watch</code>. I'm a lazy guy. :smile:</li> <li>Switched to tox for local and CI testing.</li> </ul>"},{"location":"changelog/#092","title":"0.9.2","text":"<ul> <li>Removed <code>httpx</code> as a dependency. Downloading the cli is done with <code>urllib.request.urlopen</code> once again. Fixes #4</li> <li>Removed rich-styling information from error strings. Fixes #5</li> <li>Fixing more typos in the README.md.</li> </ul>"},{"location":"changelog/#091","title":"0.9.1","text":"<ul> <li>Fixing some typos in the documentation.</li> </ul>"},{"location":"changelog/#090","title":"0.9.0","text":"<ul> <li>Inital public release.</li> </ul>"},{"location":"development/","title":"Development Guide","text":"<p>This project is managed with hatch. So in order to setup an development environment, you have to install hatch first. It might be also a good idea, if you are new to hatch, that you work through the introduction.</p>"},{"location":"development/#create-default-environment","title":"Create default environment","text":"<p>To create the default environment for development, you can simply run the following command. This will setup the environment and install all the dependencies.</p> <pre><code>hatch env create\n</code></pre>"},{"location":"development/#entering-the-default-environment","title":"Entering the default environment","text":"<p>Enter the fresh environment with the following command.</p> <pre><code>hatch env shell\n</code></pre>"},{"location":"development/#running-the-test-suite","title":"Running the test suite","text":"<p>The test suite uses the matrix feature of hatch and runs the tests against the Python versions 3.8-3.12 and the Django versions 3.2, 4.1 and 4.2. Python versions that are not installed locally are skipped.</p> <pre><code>hatch run test:test\n</code></pre> <p>If you want to get coverage output, call the following command.</p> <pre><code>hatch run test:cov\n</code></pre>"},{"location":"development/#testing-individual-python-andor-django-versions","title":"Testing individual Python and/or Django versions","text":"<p>Based on the matrix hatch creates a bunch of virtual environments to use for testing:</p> Envs test.py3.8-3.2 test.py3.8-4.1 test.py3.8-4.2 test.py3.9-3.2 test.py3.9-4.1 test.py3.9-4.2 test.py3.10-3.2 test.py3.10-4.1 test.py3.10-4.2 test.py3.11-3.2 test.py3.11-4.1 test.py3.11-4.2 test.py3.12-3.2 test.py3.12-4.1 test.py3.12-4.2 <p>You can either test against a certain version of Python and all versions of Django by picking the Python version.</p> <pre><code>hatch run +py=3.8 test:test\n</code></pre> <p>Or you can pick a certain Django version and test against all Python versions.</p> <pre><code>hatch run +django=4.1 test:test\n</code></pre> <p>Or you can pick an individual environment.</p> <pre><code>hatch run test.py3.8-3.2:test\n</code></pre>"},{"location":"development/#running-formatters-linters-and-type-checking","title":"Running formatters, linters and type checking","text":"<p>The projects uses pyright for type checking, black to check the code formatting, ruff for linting Python code and curlylint for linting templates.</p> <p>The <code>pyproject.toml</code> contains configuration for all the tools, which will also be used by the corresponding IDE extensions.</p> <p>Run all linters and checkers.</p> <pre><code>hatch run lint:all\n</code></pre> <p>Run pyright, ruff and black on the Python code.</p> <pre><code>hatch run lint:python\n</code></pre> <p>Run curlylint on the template code.</p> <pre><code>hatch run lint:templates\n</code></pre>"},{"location":"development/#pre-commit-setup","title":"pre-commit setup","text":"<p>The project uses pre-commit to maintain the desired code quality. Instead of using the official <code>pre-commit</code> hooks, the project use the locally installed versions which are also used for the formatters, linters and type checkers.</p> <pre><code>default_language_version:\npython: python3.8\n\nrepos:\n- repo: https://github.com/pre-commit/pre-commit-hooks\nrev: v4.4.0\nhooks:\n- id: trailing-whitespace\nexclude: \"^tests/__snapshots__\"\n- id: end-of-file-fixer\n- id: check-yaml\n- id: check-toml\n- id: check-added-large-files\n- id: check-merge-conflict\n- id: check-case-conflict\n- id: check-symlinks\n- id: check-json\n\n- repo: local\nhooks:\n- id: pyright\nname: Run pyright\nentry: hatch run lint:run-pyright\nlanguage: system\nfiles: \\.py$\n- id: black\nname: Run black\nentry: hatch run lint:run-black\nlanguage: system\nfiles: \\.py$\n- id: ruff\nname: Run ruff\nentry: hatch run lint:run-ruff\nlanguage: system\nfiles: \\.py$\n- id: curlylint\nname: Run curlylint\nentry: hatch run lint:run-curlylint\nlanguage: system\nfiles: \\.html$\n</code></pre>"},{"location":"development/#removing-virtualenvs","title":"Removing virtualenvs","text":"<p>From time to time you might want to give the virtual environments a fresh start. You can prune the envs with the following command.</p> <pre><code>hatch env prune\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#install-django-tailwind-cli","title":"Install <code>django-tailwind-cli</code>","text":"<ol> <li>Install the library.</li> </ol> <pre><code>python -m pip install django-tailwind-cli\n</code></pre> <ol> <li>Add <code>django_tailwind_cli</code> to <code>INSTALLED_APPS</code> in <code>settings.py</code>.</li> </ol> <pre><code>INSTALLED_APPS = [\n    # other Django apps\n    \"django_tailwind_cli\",\n]\n</code></pre> <ol> <li>Configure the <code>STATICFILES_DIRS</code> parameter in your <code>settings.py</code> if not already configured.</li> </ol> <pre><code>STATICFILES_DIRS = [BASE_DIR / \"assets\"]\n</code></pre> <ol> <li>Add template code.</li> </ol> <pre><code>{% load tailwind_cli %}\n...\n&lt;head&gt;\n  ...\n  {% tailwind_css %}\n  ...\n&lt;/head&gt;\n</code></pre> <ol> <li>Start the debug server or start the Tailwind CLI in watch mode.</li> </ol> <pre><code>python manage.py tailwind runserver\n</code></pre> <p>Or</p> <pre><code>python manage.py tailwind watch\n</code></pre> <p>If you only start the Tailwind CLI in watch mode, you have to start the debug server with the standard command <code>python manage.py runserver</code> seperately.</p>"},{"location":"installation/#optional-steps","title":"Optional steps","text":""},{"location":"installation/#install-django-browser-reload","title":"Install <code>django-browser-reload</code>","text":"<p>If you enjoy automatic reloading during development. Install the django-browser-reload app. The following installation steps are taken from the README of the project.</p> <ol> <li>Install <code>django-browser-reload</code> inside your Django project.</li> </ol> <pre><code>python -m pip install django-browser-reload\n</code></pre> <ol> <li> <p>Ensure you have <code>django.contrib.staticfiles</code> in your <code>INSTALLED_APPS</code>.</p> </li> <li> <p>Add <code>django_browser_reload</code> app to your <code>INSTALLED_APPS</code>.</p> </li> </ol> <pre><code>INSTALLED_APPS = [\n    ...,\n    \"django_browser_reload\",\n    ...,\n]\n</code></pre> <ol> <li>Include the app URL\u2019s in your root URLconf(s).</li> </ol> <pre><code>from django.urls import include, path\n\nurlpatterns = [\n    ...,\n    path(\"__reload__/\", include(\"django_browser_reload.urls\")),\n]\n</code></pre> <ol> <li>Add the middleware.</li> </ol> <pre><code>MIDDLEWARE = [\n    # ...\n    \"django_browser_reload.middleware.BrowserReloadMiddleware\",\n    # ...\n]\n</code></pre> <p>The middleware should be listed after any that encodes the response, such as Django\u2019s GZipMiddleware.</p> <p>The middleware automatically inserts the required script tag on HTML responses before  when DEBUG is True. It does so to every HTML response, meaning it will be included on Django\u2019s debug pages, admin pages, etc. If you want more control, you can instead insert the script tag in your templates\u2014see below.</p>"},{"location":"settings/","title":"Settings &amp; Configuration","text":""},{"location":"settings/#settings","title":"Settings","text":"<p>The package can be configured by a few settings, which can be overwritten in the <code>settings.py</code> of your project.</p> <code>TAILWIND_VERSION</code> <p>Default: <code>\"3.3.3\"</code></p> <p>This defines the version of the CLI and of Tailwind CSS you want to use in your project.</p> <code>TAILWIND_CLI_PATH</code> <p>Default: <code>\"~/.local/bin/\"</code></p> <p>The path where to store CLI binary on your machine. The default value aims for an installation in your home directory and is tailored for Unix and macOS systems. On Windows you might need to configure a different path.</p> <code>TAILWIND_CLI_SRC_CSS</code> <p>Default: <code>None</code></p> <p>The name of the optional input file for the Tailwind CLI, where all the directivces and custom styles are defined. This is where you add your own definitions for the different layers.</p> <p>If you don't define this setting, the default of the Tailwind CLI is used.</p> <code>TAILWIND_CLI_DIST_CSS</code> <p>Default: <code>\"css/styles.css\"</code></p> <p>The name of the output file. This file is stored relative to the first element of the <code>STATICFILES_DIRS</code> array.</p> <code>TAILWIND_CLI_CONFIG_FILE</code> <p>Default: <code>\"tailwind.config.js\"</code></p> <p>The name of the Tailwind CLI config file. The file is stored relative to the <code>BASE_DIR</code> defined in your settings.</p>"},{"location":"settings/#tailwindconfigjs","title":"<code>tailwind.config.js</code>","text":"<p>If you don't create a <code>tailwind.config.js</code> file yourself, the management commands will create a sane default for you inside the <code>BASE_DIR</code> of your project. The default activates all the official plugins for Tailwind CSS and adds a minimal plugin to support some variants for HTMX.</p> <p>The default configuration also embrasses the nice trick authored by Carlton Gibson in his post Using Django\u2019s template loaders to configure Tailwind\u00b6. The implementation adopts Carlton's implementation to honor the conventions of this project. If you put your <code>tailwind.config.js</code> in a different location then your <code>BASE_DIR</code>, you have to change this file too.</p> <p>This configuration uses the management command <code>tailwind list_templates</code>, which list all the templates files inside your project.</p> <p>Editor Integration besides VS Code</p> <p>The following default configuration tries to be as smart as possible to find all the templates inside your project and installed dependencies. This works like a charm when you run the debug server using <code>python manage.py tailwind runserver</code>. It also works if you start VSCode with <code>code .</code> from within the active virtual environment.</p> <p>But it does not work with Sublime Text and the lsp-tailwindcss package or with the various LSP packages for (neo)vim. The reason is, that these intergrations not honoring the active virtual environment when being started. If you have an idea to solve this, patches are welcome.</p> <p>With editors besides VS Code please use the simple config at the end of this page.</p> tailwind.config.js<pre><code>/** @type {import('tailwindcss').Config} */\nconst plugin = require(\"tailwindcss/plugin\");\nconst { spawnSync } = require(\"child_process\");\n\n// Calls Django to fetch template files\nconst getTemplateFiles = () =&gt; {\nconst command = \"python3\";\nconst args = [\"manage.py\", \"tailwind\", \"list_templates\"];\n// Assumes tailwind.config.js is located in the BASE_DIR of your Django project.\nconst options = { cwd: __dirname };\n\nconst result = spawnSync(command, args, options);\n\nif (result.error) {\nthrow result.error;\n}\n\nif (result.status !== 0) {\nconsole.log(result.stdout.toString(), result.stderr.toString());\nthrow new Error(\n`Django management command exited with code ${result.status}`\n);\n}\n\nconst templateFiles = result.stdout\n.toString()\n.split(\"\\n\")\n.map((file) =&gt; file.trim())\n.filter(function (e) {\nreturn e;\n}); // Remove empty strings, including last empty line.\nreturn templateFiles;\n};\n\nmodule.exports = {\ncontent: [].concat(getTemplateFiles()),\ntheme: {\nextend: {},\n},\nplugins: [\nrequire(\"@tailwindcss/typography\"),\nrequire(\"@tailwindcss/forms\"),\nrequire(\"@tailwindcss/aspect-ratio\"),\nrequire(\"@tailwindcss/container-queries\"),\nplugin(function ({ addVariant }) {\naddVariant(\"htmx-settling\", [\"&amp;.htmx-settling\", \".htmx-settling &amp;\"]);\naddVariant(\"htmx-request\", [\"&amp;.htmx-request\", \".htmx-request &amp;\"]);\naddVariant(\"htmx-swapping\", [\"&amp;.htmx-swapping\", \".htmx-swapping &amp;\"]);\naddVariant(\"htmx-added\", [\"&amp;.htmx-added\", \".htmx-added &amp;\"]);\n}),\n],\n};\n</code></pre>"},{"location":"settings/#simple-config-for-sublime-text-and-neovim","title":"Simple Config for Sublime Text and (neo)vim","text":"tailwind.config.js<pre><code>/** @type {import('tailwindcss').Config} */\nconst plugin = require(\"tailwindcss/plugin\");\n\nmodule.exports = {\ncontent: [\"./templates/**/*.html\", \"**/templates/**/*.html\"],\ntheme: {\nextend: {},\n},\nplugins: [\nrequire(\"@tailwindcss/typography\"),\nrequire(\"@tailwindcss/forms\"),\nrequire(\"@tailwindcss/aspect-ratio\"),\nrequire(\"@tailwindcss/container-queries\"),\nplugin(function ({ addVariant }) {\naddVariant(\"htmx-settling\", [\"&amp;.htmx-settling\", \".htmx-settling &amp;\"]);\naddVariant(\"htmx-request\", [\"&amp;.htmx-request\", \".htmx-request &amp;\"]);\naddVariant(\"htmx-swapping\", [\"&amp;.htmx-swapping\", \".htmx-swapping &amp;\"]);\naddVariant(\"htmx-added\", [\"&amp;.htmx-added\", \".htmx-added &amp;\"]);\n}),\n],\n};\n</code></pre>"},{"location":"template_tags/","title":"Template Tags","text":""},{"location":"template_tags/#tailwind_css","title":"<code>{% tailwind_css %}</code>","text":"<p>Put this template tag in the head of your base template. It includes the <code>link</code>-tags to load the CSS stylesheets.</p> <pre><code>{% load tailwind_cli %}\n...\n&lt;head&gt;\n    ...\n    {% tailwind_css %}\n    ...\n&lt;/head&gt;\n</code></pre> <p>Depending on the value of the variable <code>settings.DEBUG</code> it also activates preloading.</p> <ul> <li><code>DEBUG = False</code> creates the following output:</li> </ul> <pre><code>&lt;link rel=\"preload\" href=\"/static/css/styles.css\" as=\"style\" /&gt;\n&lt;link rel=\"stylesheet\" href=\"/static/css/styles.css\" /&gt;\n</code></pre> <ul> <li><code>DEBUG = True</code> creates this output:</li> </ul> <pre><code>&lt;link rel=\"stylesheet\" href=\"/static/css/styles.css\" /&gt;\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>Do I have to install the Tailwind CLI?</p> <p>No. The management commands of this library handle the download and installation of the Tailwind CLI. You don't have to deal with this. But you can configure the installation location and the version of the CLI you want to use. Take a look at the settings section.</p> <p>Do I have to create my own <code>tailwind.config.js</code>?</p> <p>No. The management commands also take care of this step. If no <code>tailwind.config.js</code> is present in your project, a new one with sane defaults will be created. Afterwards this file will be used and be customized by you. The default location for the file is the <code>BASE_DIR</code> of your project, but you can change this. Take a look at the settings section.</p>"},{"location":"usage/#during-development","title":"During development","text":""},{"location":"usage/#use-the-debug-server-of-this-library","title":"Use the debug server of this library","text":"<p>The easiest way to use this library during development is to start the debug server provided by it.</p> <pre><code>python manage.py tailwind runserver\n</code></pre> <p>This command starts two processes. One is the standard debug server of Django which is normally started by running <code>python manage.py runserver</code>. The other is the Tailwind CLI in watch mode by running <code>python manage.py tailwind watch</code>.</p>"},{"location":"usage/#use-the-standard-debug-server-along-with-tailwind-cli-in-watch-mode","title":"Use the standard debug server along with Tailwind CLI in watch mode","text":"<p>If you prefer to use the standard debug server or have written your own extended debug server, you have to start two seperate processes in different shells or with some kind of process manager. One is of course your debug server and the other is the Tailwind CLI in watch mode, which can be started with the following management command.</p> <pre><code>python manage.py tailwind watch\n</code></pre>"},{"location":"usage/#in-your-build-process","title":"In your build process","text":"<p>To create an optimized production built of the stylesheet run the following command. Afterwards you are ready to deploy. Take care the this command is run before <code>python manage.py collectstatic</code>.</p> <pre><code>python manage.py tailwind build\n</code></pre>"}]}